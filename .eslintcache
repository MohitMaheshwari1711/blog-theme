[{"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\index.js":"1","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\reportWebVitals.js":"2","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\App.js":"3","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Index.js":"4","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\BlogDetails\\BlogDetails.js":"5","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Footer\\Footer.js":"6","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\firebase.js":"7","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Helper.js":"8","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Card\\Card.js":"9","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Paginator\\Paginator.js":"10"},{"size":594,"mtime":1611732689494,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1361,"mtime":1611732689499,"results":"14","hashOfConfig":"12"},{"size":2465,"mtime":1611694062777,"results":"15","hashOfConfig":"12"},{"size":4675,"mtime":1611695612530,"results":"16","hashOfConfig":"12"},{"size":833,"mtime":1611732778934,"results":"17","hashOfConfig":"12"},{"size":587,"mtime":1611695853519,"results":"18","hashOfConfig":"12"},{"size":908,"mtime":1611662188139,"results":"19","hashOfConfig":"12"},{"size":1302,"mtime":1611732714773,"results":"20","hashOfConfig":"12"},{"size":769,"mtime":1611697581953,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"3cjks4",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\index.js",[],["46","47"],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\reportWebVitals.js",[],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\App.js",[],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Index.js",["48"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport db from '../firebase';\r\nimport Card from './Card/Card';\r\nimport Paginator from './Paginator/Paginator';\r\n\r\n\r\nfunction Index() {\r\n\r\n    const [pageInfo, changepageInfo] = useState({\r\n        offset: 0,\r\n        data: [],\r\n        perPage: 4,\r\n        currentPage: 0,\r\n        pageCount: 0,\r\n        slicedBlog: null,\r\n    });\r\n\r\n    const receivedData = (offset, perPage) => {\r\n        db.collection(\"blogs\").get().then(\r\n            querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => {\r\n                    return {\r\n                        id: doc.id,\r\n                        ...doc.data()\r\n                    }\r\n                });\r\n                data.sort(\r\n                    (a, b) => {\r\n                        return new Date(b.date.seconds) - new Date(a.date.seconds)\r\n                    }\r\n                )\r\n                let pageCount = Math.ceil(data.length / perPage);\r\n                let slicedData = data.slice(offset, offset + perPage);\r\n                changepageInfo({\r\n                    ...pageInfo,\r\n                    pageCount: pageCount,\r\n                    slicedBlog: slicedData\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const handlePageClick = (e) => {\r\n        let selectedPage = e.selected;\r\n        let newOffset = selectedPage * pageInfo.perPage;\r\n\r\n        receivedData(newOffset, pageInfo.perPage);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        receivedData(pageInfo.offset, pageInfo.perPage)\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <section className=\"headline\">\r\n            </section>\r\n            <section className=\"features\">\r\n                {\r\n                    pageInfo.slicedBlog ? pageInfo.slicedBlog.map(\r\n                        blog => <React.Fragment key={blog.id}>\r\n                            <Card title={blog.title} userImage={blog.userImage} thumbnailUrl={blog.thumbnailUrl} subtitle={blog.subtitle} date={blog.date} id={blog.id} details={blog.details[0]} username={blog.username} />\r\n                        </React.Fragment>\r\n                    ) : <p>The content is being loaded</p>\r\n                }\r\n            </section>\r\n            {\r\n                pageInfo.pageCount === 0 ? <p>deded</p> : <Paginator onPageChange={handlePageClick} pageCount={pageInfo.pageCount} />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Index;\r\n\r\n","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\BlogDetails\\BlogDetails.js",["49","50"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport db from '../../firebase';\r\nimport getDate from '../Helper';\r\nimport './BlogDetails.css';\r\n\r\n\r\n\r\nexport default function BlogDetails() {\r\n\r\n    const { id } = useParams();\r\n    const [blogData, getBlogData] = useState({});\r\n\r\n    useEffect(() => {\r\n        db.collection(\"blogs\").doc(id).get().then(\r\n            doc => {\r\n                getBlogData({\r\n                    ...doc.data(),\r\n                    date: doc.data().date.seconds\r\n                });\r\n            }\r\n        );\r\n    }, [])\r\n\r\n    return (\r\n        <section className=\"features\">\r\n            <div className='blog-details'>\r\n                <div className=\"wrapper-details\">\r\n                    <div className='image-container-details'>\r\n                        <img src={blogData.userImage} className=\"image--cover-details\" alt='...' />\r\n                    </div>\r\n                    <div style={{ display: 'grid' }}>\r\n                        <span className='username-details'>{blogData.username}</span>\r\n                        {\r\n                            blogData.date && (\r\n                                <span className='date-details'>{getDate(blogData.date)}</span>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className='blog-container'>\r\n                    <div style={{ width: '78%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                        <h1>{blogData.title}</h1>\r\n                        {\r\n                            blogData.subtitle === \"\" ? <div style={{ height: '1rem' }}></div> : <h2>{blogData.subtitle}</h2>\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <img src={blogData.thumbnailUrl} className='featured-image img-fluid' alt='...' />\r\n                        <div style={{ width: '78%', marginLeft: 'auto', marginRight: 'auto' }}>\r\n                            { blogData.details &&\r\n                                (\r\n                                    blogData.details.map(\r\n                                        (val, index) => {\r\n                                            if (typeof (val) === 'string') {\r\n                                                return (\r\n                                                    <React.Fragment key={index}>\r\n                                                        <p>{val}</p>\r\n                                                        <br />\r\n                                                    </React.Fragment>\r\n                                                )\r\n                                            } else {\r\n                                                if (val['subtitle']) {\r\n                                                    return (\r\n                                                        <React.Fragment key={index}>\r\n                                                            <h1>{val['subtitle']}</h1>\r\n                                                        </React.Fragment>\r\n                                                    )\r\n                                                } else if (val['ul']) {\r\n                                                    return (\r\n                                                        <React.Fragment key={index}>\r\n                                                            <ul>\r\n                                                                {\r\n                                                                    val['ul'].map(\r\n                                                                        (val, ind) => {\r\n                                                                            return (<li key={ind}>{val}</li>)\r\n                                                                        }\r\n                                                                    )\r\n                                                                }\r\n                                                            </ul>\r\n                                                            <br />\r\n                                                        </React.Fragment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    )\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Footer\\Footer.js",[],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\firebase.js",[],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Helper.js",[],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Card\\Card.js",[],"C:\\Users\\Acer\\Desktop\\blog-theme\\src\\Components\\Paginator\\Paginator.js",[],["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":55,"column":8,"nodeType":"59","endLine":55,"endColumn":10,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":24,"column":8,"nodeType":"59","endLine":24,"endColumn":10,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":55,"column":54,"nodeType":"65","messageId":"66","endLine":55,"endColumn":56},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'pageInfo.offset', 'pageInfo.perPage', and 'receivedData'. Either include them or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["72"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["69"],["70"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [pageInfo.offset, pageInfo.perPage, receivedData]",{"range":"77","text":"78"},"Update the dependencies array to be: [id]",{"range":"79","text":"80"},[1588,1590],"[pageInfo.offset, pageInfo.perPage, receivedData]",[604,606],"[id]"]